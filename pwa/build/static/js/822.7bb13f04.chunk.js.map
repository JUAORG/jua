{"version":3,"file":"static/js/822.7bb13f04.chunk.js","mappings":"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","sources":["components/SearchBar.js","pages/DashboardApp.js","components/SpeedDial.js","components/Page.js"],"sourcesContent":["import * as React from 'react';\nimport Paper from '@mui/material/Paper';\nimport InputBase from '@mui/material/InputBase';\nimport IconButton from '@mui/material/IconButton';\nimport SearchIcon from '@mui/icons-material/Search';\nimport notificationManager from '../actions/NotificationManager';\n\nexport default function SearchBar() {\n  const displayFunctionalityNotReadyMessage = () => {\n    notificationManager.warning('This functionality is not ready yet', 'Work in progress');\n  };\n\n  return (\n    <Paper component=\"form\" sx={{ p: '2px 4px', m: '10px 0px 20px', display: 'flex', alignItems: 'center' }}>\n      <InputBase\n        disabled\n        onClick={displayFunctionalityNotReadyMessage}\n        sx={{ ml: 1, flex: 1 }}\n        placeholder=\"Search Jua\"\n        inputProps={{ 'aria-label': 'search Jua' }}\n      />\n      <IconButton onClick={displayFunctionalityNotReadyMessage} type=\"button\" sx={{ p: '10px' }} aria-label=\"search\">\n        <SearchIcon />\n      </IconButton>\n    </Paper>\n  );\n}\n\n// import { useState, useEffect } from 'react';\n// import { Paper, InputBase, IconButton, List, ListItem, ListItemText, Divider, CircularProgress } from '@mui/material';\n// import SearchIcon from '@mui/icons-material/Search';\n// import { useNavigate } from 'react-router-dom';\n// import { collection, collectionGroup, query, where, onSnapshot } from 'firebase/firestore';\n// import { db } from '../actions/firebase';\n\n// export default function SearchBar() {\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [results, setResults] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     if (!searchTerm.trim()) {\n//       setResults([]);\n//       return;\n//     }\n\n//     setLoading(true);\n\n//     // Listen for Users\n//     const usersRef = collection(db, 'users');\n//     const usersQuery = query(usersRef, where('profile_visible', '==', true));\n//     const unsubscribeUsers = onSnapshot(usersQuery, (snapshot) => {\n//       const usersResults = snapshot.docs\n//         .filter((doc) => {\n//           const data = doc.data();\n//           return (\n//             data.first_name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n//             data.last_name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n//             data.email?.toLowerCase().includes(searchTerm.toLowerCase())\n//           );\n//         })\n//         .map((doc) => ({ type: 'user', id: doc.id, ...doc.data() }));\n\n//       setResults((prev) => [...usersResults]);\n//     });\n\n//     // Listen for Service Requests\n//     const serviceRequestsQuery = collectionGroup(db, 'serviceRequests');\n//     const unsubscribeRequests = onSnapshot(serviceRequestsQuery, (snapshot) => {\n//       const serviceRequestsResults = snapshot.docs\n//         .filter((doc) => doc.data().subject?.toLowerCase().includes(searchTerm.toLowerCase()))\n//         .map((doc) => ({ type: 'serviceRequest', id: doc.id, ...doc.data() }));\n\n//       setResults((prev) => [...prev, ...serviceRequestsResults]);\n//       setLoading(false);\n//     });\n\n//     return () => {\n//       unsubscribeUsers();\n//       unsubscribeRequests();\n//     };\n//   }, [searchTerm]);\n\n//   const handleResultClick = (result) => {\n//     if (result.type === 'user') {\n//       navigate(`/dashboard/jua_network/${result.id}`);\n//     } else if (result.type === 'serviceRequest') {\n//       navigate(`/dashboard/service_request/${result.id}`);\n//     }\n//   };\n\n//   return (\n//     <>\n//       <Paper component=\"form\" sx={{ p: '2px 4px', m: '10px 0px 20px', display: 'flex', alignItems: 'center' }} onSubmit={(e) => e.preventDefault()}>\n//         <InputBase\n//           sx={{ ml: 1, flex: 1 }}\n//           placeholder=\"Search users, service requests...\"\n//           inputProps={{ 'aria-label': 'search JUA' }}\n//           value={searchTerm}\n//           onChange={(e) => setSearchTerm(e.target.value)}\n//         />\n//         <IconButton sx={{ p: '10px' }}>\n//           {loading ? <CircularProgress size={20} /> : <SearchIcon />}\n//         </IconButton>\n//       </Paper>\n\n//       {results.length > 0 && (\n//         <List sx={{ border: '1px solid #ddd', borderRadius: 1, bgcolor: 'background.paper' }}>\n//           {results.map((result) => (\n//             <div key={result.id}>\n//               <ListItem button onClick={() => handleResultClick(result)}>\n//                 <ListItemText\n//                   primary={result.type === 'user' ? `${result.first_name} ${result.last_name}` : result.subject}\n//                   secondary={result.type === 'user' ? result.email : result.description}\n//                 />\n//               </ListItem>\n//               <Divider />\n//             </div>\n//           ))}\n//         </List>\n//       )}\n//     </>\n//   );\n// }\n","import { useState, useEffect } from 'react';\nimport { get, map } from 'lodash';\nimport Joyride, { STATUS, ACTIONS } from 'react-joyride';\nimport { Grid, Container, Typography, ImageList, ImageListItem, ImageListItemBar } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport FeedbackIcon from '@mui/icons-material/Feedback';\nimport ShareIcon from '@mui/icons-material/Share';\nimport { doc, getDoc, updateDoc } from 'firebase/firestore';\nimport { auth, db } from '../actions/firebase';\nimport Page from '../components/Page';\nimport BasicSpeedDial from '../components/SpeedDial';\nimport BriefServiceCards from '../components/BriefServiceCards';\nimport SearchBar from '../components/SearchBar';\n\nexport default function DashboardApp() {\n  const navigate = useNavigate();\n  const [user, setUser] = useState(null);\n  const [loadingUser, setLoadingUser] = useState(true);\n  const [runTour, setRunTour] = useState(false);\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      try {\n        const { currentUser } = auth;\n        if (currentUser) {\n          const userRef = doc(db, 'users', currentUser.uid);\n          const userSnap = await getDoc(userRef);\n          if (userSnap.exists()) {\n            const userData = userSnap.data();\n            setUser({ ...userData, id: userSnap.id });\n\n            // 🔥 Check tour flag and start tour if not done\n            if (!userData.tour_completed) {\n              setRunTour(true);\n            }\n          }\n        }\n      } catch (error) {\n      } finally {\n        setLoadingUser(false);\n      }\n    };\n\n    fetchUser();\n  }, []);\n\n  const steps = [\n    {\n      target: '.MuiTypography-h4',\n      content: 'Welcome to your JUA Dashboard!',\n      placement: 'auto',\n    },\n    {\n      target: '.simplebar-content',\n      content: 'Explore services and feeds here.',\n      placement: 'auto',\n    },\n    {\n      target: '.MuiSpeedDial-root',\n      content: 'Use this button for quick actions like feedback.',\n      placement: 'auto',\n    },\n  ];\n\n  const handleJoyrideCallback = async data => {\n    const { status, action } = data;\n    const finishedStatuses = [STATUS.FINISHED, STATUS.SKIPPED];\n\n    if (finishedStatuses.includes(status) || action === ACTIONS.CLOSE) {\n      setRunTour(false);\n\n      // 🔥 Mark as completed in Firestore\n      try {\n        const { currentUser } = auth;\n        if (currentUser) {\n          const userRef = doc(db, 'users', currentUser.uid);\n          await updateDoc(userRef, { tour_completed: true });\n        }\n      } catch (err) {}\n    }\n  };\n\n  return (\n    <Page title=\"Dashboard\">\n      {/* Joyride Tour */}\n      <Joyride\n        steps={steps}\n        run={runTour}\n        continuous\n        showProgress\n        showSkipButton\n        disableOverlayClose\n        callback={handleJoyrideCallback}\n        styles={{\n          options: {\n            zIndex: 10000,\n            primaryColor: '#2065d1',\n          },\n        }}\n      />\n\n      <Container maxWidth=\"xl\">\n        <Typography variant=\"h4\" sx={{ mb: 5 }}>\n          {loadingUser ? 'Loading...' : `${get(user, 'first_name') || ''} ${get(user, 'last_name') || ''}`}\n        </Typography>\n        <SearchBar />\n        <Typography variant=\"h6\" my={4}>\n          Industries\n        </Typography>\n        <Typography variant=\"h6\" my={4}>\n          Feed\n        </Typography>\n        <Grid container spacing={3}>\n          {/* Conditional rendering based on user role */}\n        </Grid>\n        <BasicSpeedDial\n          actions={[\n            {\n              icon: <FeedbackIcon />,\n              name: 'Feedback',\n              onClick: () => navigate(`/dashboard/about`, { replace: true }),\n            },\n            {\n              icon: <ShareIcon />,\n              name: 'Share',\n              onClick: () => navigator.share({ title: 'JUA', text: 'Join JUA today!', url: 'https://jua.one' }),\n            },\n          ]}\n        />\n      </Container>\n    </Page>\n  );\n}\n","import * as React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Box, SpeedDial, SpeedDialIcon, SpeedDialAction } from '@mui/material';\n\nexport default function BasicSpeedDial({ actions, customSpeedDialIcon }) {\n  return (\n    <Box sx={{ bottom: 10, right: 10, position: 'fixed', transform: 'translateZ(0px)', flexGrow: 1 }}>\n      <SpeedDial\n        ariaLabel=\"SpeedDial basic example\"\n        sx={{ position: 'absolute', bottom: 16, right: 16 }}\n        icon={customSpeedDialIcon || <SpeedDialIcon />}\n      >\n        {actions.map(action => (\n          <SpeedDialAction onClick={action.onClick} key={action.name} icon={action.icon} tooltipTitle={action.name} />\n        ))}\n      </SpeedDial>\n    </Box>\n  );\n}\n","import PropTypes from 'prop-types';\nimport ArrowBackIosRoundedIcon from '@mui/icons-material/ArrowBackIosRounded';\nimport { Helmet } from 'react-helmet-async';\nimport { forwardRef } from 'react';\n// @mui\nimport { Box } from '@mui/material';\n\n// ----------------------------------------------------------------------\n\nconst Page = forwardRef(({ children, title = '', showGoBackArrow = false, meta, ...other }, ref) => (\n  <>\n    <Helmet>\n      <title>{`${title} | JUA`}</title>\n      {meta}\n    </Helmet>\n\n    <Box ref={ref} {...other}>\n      {showGoBackArrow && (\n        <ArrowBackIosRoundedIcon\n          onClick={() => window.history.go(-1)}\n          sx={{\n            top: 40,\n            left: 20,\n            cursor: 'pointer',\n            position: 'relative',\n          }}\n        />\n      )}\n      {children}\n    </Box>\n  </>\n));\n\nPage.propTypes = {\n  children: PropTypes.node.isRequired,\n  title: PropTypes.string,\n  meta: PropTypes.node,\n};\n\nexport default Page;\n"],"names":["SearchBar","displayFunctionalityNotReadyMessage","notificationManager","warning","_jsxs","Paper","component","sx","p","m","display","alignItems","children","_jsx","InputBase","disabled","onClick","ml","flex","placeholder","inputProps","IconButton","type","SearchIcon","DashboardApp","navigate","useNavigate","user","setUser","useState","loadingUser","setLoadingUser","runTour","setRunTour","useEffect","async","currentUser","auth","userRef","doc","db","uid","userSnap","getDoc","exists","userData","data","_objectSpread","id","tour_completed","error","fetchUser","Page","title","Joyride","steps","target","content","placement","run","continuous","showProgress","showSkipButton","disableOverlayClose","callback","status","action","STATUS","FINISHED","SKIPPED","includes","ACTIONS","CLOSE","updateDoc","err","styles","options","zIndex","primaryColor","Container","maxWidth","Typography","variant","mb","concat","get","my","Grid","container","spacing","BasicSpeedDial","actions","icon","FeedbackIcon","name","replace","ShareIcon","navigator","share","text","url","_ref","customSpeedDialIcon","Box","bottom","right","position","transform","flexGrow","SpeedDial","ariaLabel","SpeedDialIcon","map","SpeedDialAction","tooltipTitle","forwardRef","ref","showGoBackArrow","meta","other","_objectWithoutProperties","_excluded","_Fragment","Helmet","ArrowBackIosRoundedIcon","window","history","go","top","left","cursor","propTypes","PropTypes","isRequired"],"sourceRoot":""}